const std = @import("std");
const os = std.os;
const posix = std.posix;
const mem = std.mem;
const log = std.log;

const pure = @import("pure.zig");
const regress = @import("regress");

const rlog = log.scoped(.regress);

// Runs a regression test of C version of pure against Zig version
// Using libzip regression testing set.
pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{
        // .enable_memory_limit = true,
        // .never_unmap = true,
        // .retain_metadata = true,
    }){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    var dir = try std.fs.openDirAbsolute(regress.regression_zip_dir, .{ .iterate = true });
    var walker = try dir.walk(allocator);
    defer walker.deinit();
    var count: usize = 0;
    while (try walker.next()) |entry| {
        if (!mem.endsWith(u8, entry.basename, ".zip"))
            continue;

        const zip = try open_mmap(entry.dir, entry.path);
        defer posix.munmap(zip);

        var c_diags: pure.Diagnostics = .{};
        const ret_c = convertError(pure_zip(zip.ptr, zip.len, 0), &c_diags);

        var zig_diags: pure.Diagnostics = .{};
        const ret_zig = pure.zip(zip, allocator, .{ .diagnostics = &zig_diags });

        try std.testing.expectEqual(ret_c, ret_zig);
        try std.testing.expectEqualDeep(c_diags, zig_diags);

        count += 1;
    }
    rlog.info("checked {} zips", .{count});
}

// Result must be closed with posix.munmap
fn open_mmap(
    dir: std.fs.Dir,
    path: []const u8,
) ![]align(mem.page_size) u8 {
    var f = try dir.openFile(path, .{ .mode = .read_only });
    defer f.close();
    const stat = try f.stat();
    return try posix.mmap(null, stat.size, posix.PROT.READ, posix.MAP{ .TYPE = .PRIVATE }, f.handle, 0);
}

pub const E = enum(c_int) {
    OK,
    SIZE_MAX,
    MALLOC,
    STRING_NOT_FOUND,
    UINT64_OVERFLOW,
    ZIP_BOMB_ARCHIVES,
    ZIP_BOMB_DEPTH,
    ZIP_BOMB_FIFIELD,
    ZIP_BOMB_FILES,
    ZIP_BOMB_RATIO,
    ZIP_BOMB_INFLATE_COMPRESSED_OVERFLOW,
    ZIP_BOMB_INFLATE_UNCOMPRESSED_OVERFLOW,
    ZIP_TOO_SMALL,
    ZIP_SIZE_4GB,
    ZIP_RAR,
    ZIP_TAR,
    ZIP_XAR,
    ZIP_SIGNATURE,
    ZIP_EOCDR_NOT_FOUND,
    ZIP_EOCDR_OVERFLOW,
    ZIP_EOCDR_COMMENT_OVERFLOW,
    ZIP_EOCDR_SIGNATURE,
    ZIP_EOCDR_RECORDS,
    ZIP_EOCDR_SIZE_OVERFLOW,
    ZIP_EOCDR_SIZE_UNDERFLOW,
    ZIP_MULTIPLE_DISKS,
    ZIP_APPENDED_DATA_ZEROED,
    ZIP_APPENDED_DATA_BUFFER_BLEED,
    ZIP_PREPENDED_DATA,
    ZIP_PREPENDED_DATA_ZEROED,
    ZIP_PREPENDED_DATA_BUFFER_BLEED,
    ZIP_CDH_OVERFLOW,
    ZIP_CDH_SIGNATURE,
    ZIP_CDH_RELATIVE_OFFSET_OVERFLOW,
    ZIP_CDH_RELATIVE_OFFSET_OVERLAP,
    ZIP_CDH_FILE_NAME_OVERFLOW,
    ZIP_CDH_EXTRA_FIELD_OVERFLOW,
    ZIP_CDH_FILE_COMMENT_OVERFLOW,
    ZIP_LFH_OVERFLOW,
    ZIP_LFH_SIGNATURE,
    ZIP_LFH_FILE_NAME_OVERFLOW,
    ZIP_LFH_EXTRA_FIELD_OVERFLOW,
    ZIP_LFH_UNDERFLOW_ZEROED,
    ZIP_LFH_UNDERFLOW_BUFFER_BLEED,
    ZIP_LFH_DATA_OVERFLOW,
    ZIP_DDR_OVERFLOW,
    ZIP_LF_OVERFLOW,
    ZIP_LF_UNDERFLOW_ZEROED,
    ZIP_LF_UNDERFLOW_BUFFER_BLEED,
    ZIP_CD_OVERFLOW,
    ZIP_CD_UNDERFLOW_ZEROED,
    ZIP_CD_UNDERFLOW_BUFFER_BLEED,
    ZIP_CD_EOCDR_OVERFLOW,
    ZIP_CD_EOCDR_UNDERFLOW_ZEROED,
    ZIP_CD_EOCDR_UNDERFLOW_BUFFER_BLEED,
    ZIP_DIFF_LFH_GENERAL_PURPOSE_BIT_FLAG,
    ZIP_DIFF_LFH_COMPRESSION_METHOD,
    ZIP_DIFF_LFH_LAST_MOD_FILE_TIME,
    ZIP_DIFF_LFH_LAST_MOD_FILE_DATE,
    ZIP_DIFF_LFH_CRC32,
    ZIP_DIFF_LFH_COMPRESSED_SIZE,
    ZIP_DIFF_LFH_UNCOMPRESSED_SIZE,
    ZIP_DIFF_LFH_FILE_NAME_LENGTH,
    ZIP_DIFF_LFH_FILE_NAME,
    ZIP_DIFF_LFH_DDR_CRC32,
    ZIP_DIFF_LFH_DDR_COMPRESSED_SIZE,
    ZIP_DIFF_LFH_DDR_UNCOMPRESSED_SIZE,
    ZIP_DIFF_DDR_CRC32,
    ZIP_DIFF_DDR_COMPRESSED_SIZE,
    ZIP_DIFF_DDR_UNCOMPRESSED_SIZE,
    ZIP_FLAG_OVERFLOW,
    ZIP_FLAG_TRADITIONAL_ENCRYPTION,
    ZIP_FLAG_ENHANCED_DEFLATE,
    ZIP_FLAG_COMPRESSED_PATCHED_DATA,
    ZIP_FLAG_STRONG_ENCRYPTION,
    ZIP_FLAG_UNUSED_BIT_7,
    ZIP_FLAG_UNUSED_BIT_8,
    ZIP_FLAG_UNUSED_BIT_9,
    ZIP_FLAG_UNUSED_BIT_10,
    ZIP_FLAG_ENHANCED_COMPRESSION,
    ZIP_FLAG_MASKED_LOCAL_HEADERS,
    ZIP_FLAG_RESERVED_BIT_14,
    ZIP_FLAG_RESERVED_BIT_15,
    ZIP_COMPRESSION_METHOD_DANGEROUS,
    ZIP_COMPRESSION_METHOD_ENCRYPTED,
    ZIP_COMPRESSION_METHOD_UNSUPPORTED,
    ZIP_STORED_COMPRESSION_SIZE_MISMATCH,
    ZIP_DANGEROUS_NEGATIVE_COMPRESSION_RATIO,
    ZIP_TIME_OVERFLOW,
    ZIP_TIME_HOUR_OVERFLOW,
    ZIP_TIME_MINUTE_OVERFLOW,
    ZIP_TIME_SECOND_OVERFLOW,
    ZIP_DATE_OVERFLOW,
    ZIP_DATE_YEAR_OVERFLOW,
    ZIP_DATE_MONTH_OVERFLOW,
    ZIP_DATE_DAY_OVERFLOW,
    ZIP_FILE_NAME_LENGTH,
    ZIP_FILE_NAME_CONTROL_CHARACTERS,
    ZIP_FILE_NAME_TRAVERSAL_DRIVE_PATH,
    ZIP_FILE_NAME_TRAVERSAL_RELATIVE_PATH,
    ZIP_FILE_NAME_TRAVERSAL_DOUBLE_DOTS,
    ZIP_FILE_NAME_COMPONENT_OVERFLOW,
    ZIP_FILE_NAME_BACKSLASH,
    ZIP_EXTRA_FIELD_MAX,
    ZIP_EXTRA_FIELD_MIN,
    ZIP_EXTRA_FIELD_ATTRIBUTE_OVERFLOW,
    ZIP_EXTRA_FIELD_OVERFLOW,
    ZIP_EXTRA_FIELD_UNDERFLOW_ZEROED,
    ZIP_EXTRA_FIELD_UNDERFLOW_BUFFER_BLEED,
    ZIP_EXTRA_FIELD_UNICODE_PATH_OVERFLOW,
    ZIP_EXTRA_FIELD_UNICODE_PATH_VERSION,
    ZIP_EXTRA_FIELD_UNICODE_PATH_DIFF,
    ZIP_UNIX_MODE_OVERFLOW,
    ZIP_UNIX_MODE_BLOCK_DEVICE,
    ZIP_UNIX_MODE_CHARACTER_DEVICE,
    ZIP_UNIX_MODE_FIFO,
    ZIP_UNIX_MODE_SOCKET,
    ZIP_UNIX_MODE_PERMISSIONS_STICKY,
    ZIP_UNIX_MODE_PERMISSIONS_SETGID,
    ZIP_UNIX_MODE_PERMISSIONS_SETUID,
    ZIP_DIRECTORY_COMPRESSED,
    ZIP_DIRECTORY_UNCOMPRESSED,
    ZIP_SYMLINK_COMPRESSED,
    ZIP_SYMLINK_LENGTH,
    ZIP_SYMLINK_CONTROL_CHARACTERS,
    ZIP_SYMLINK_TRAVERSAL_DRIVE_PATH,
    ZIP_SYMLINK_TRAVERSAL_RELATIVE_PATH,
    ZIP_SYMLINK_TRAVERSAL_DOUBLE_DOTS,
    ZIP_SYMLINK_COMPONENT_OVERFLOW,
    ZIP_STRING_MAX,
    ZIP_STRING_NULL_BYTE,
    ZIP_INFLATE,
    ZIP_INFLATE_DICTIONARY,
    ZIP_INFLATE_STREAM,
    ZIP_INFLATE_DATA,
    ZIP_INFLATE_MEMORY,
    ZIP_INFLATE_COMPRESSED_UNDERFLOW,
    ZIP_INFLATE_UNCOMPRESSED_UNDERFLOW,
    ZIP_AD_NIHILO,
    ZIP_EX_NIHILO,
    ZIP_CRC32,
    ZIP_EOCDL_64_OVERFLOW,
    ZIP_EOCDL_64_SIGNATURE,
    ZIP_EOCDL_64_NEGATIVE_OFFSET,
    ZIP_EOCDL_64_DISK,
    ZIP_EOCDL_64_DISKS,
    ZIP_EOCDR_64_OVERFLOW,
    ZIP_EOCDR_64_SIGNATURE,
    ZIP_EOCDR_EOCDL_64_OVERFLOW,
    ZIP_EOCDR_EOCDL_64_UNDERFLOW_ZEROED,
    ZIP_EOCDR_EOCDL_64_UNDERFLOW_BUFFER_BLEED,
    ZIP_DIFF_EOCDR_DISK,
    ZIP_DIFF_EOCDR_CD_DISK,
    ZIP_DIFF_EOCDR_CD_DISK_RECORDS,
    ZIP_DIFF_EOCDR_CD_RECORDS,
    ZIP_DIFF_EOCDR_CD_SIZE,
    ZIP_DIFF_EOCDR_CD_OFFSET,
    ZIP_EIEF_64_COMPRESSED_SIZE,
    ZIP_EIEF_64_DISK,
    ZIP_EIEF_64_RELATIVE_OFFSET,
    ZIP_EIEF_64_UNCOMPRESSED_SIZE,
    ZIP_EIEF_64_UNDERFLOW_ZEROED,
    ZIP_EIEF_64_UNDERFLOW_BUFFER_BLEED,
    ZIP_EIEF_64_LFH,
    ZIP_DIRECTORY_HAS_NO_LFH,
};

fn convertError(e: E, diags: *pure.Diagnostics) pure.Error!void {
    const subtype: ?pure.ErrorSubtype = switch (e) {
        // Eliminated
        .STRING_NOT_FOUND => null,
        .UINT64_OVERFLOW => .Overflow,

        .OK => null,
        .SIZE_MAX => .SizeMax,
        .MALLOC => .OutOfMemory,
        .ZIP_BOMB_ARCHIVES => .BombArchives,
        .ZIP_BOMB_DEPTH => .BombDepth,
        .ZIP_BOMB_FIFIELD => .BombFifield,
        .ZIP_BOMB_FILES => .BombFiles,
        .ZIP_BOMB_RATIO => .BombRatio,
        .ZIP_BOMB_INFLATE_COMPRESSED_OVERFLOW => .BombInflateCompressedOverflow,
        .ZIP_BOMB_INFLATE_UNCOMPRESSED_OVERFLOW => .BombInflateUncompressedOverflow,
        .ZIP_TOO_SMALL => .TooSmall,
        .ZIP_SIZE_4GB => .Size4Gb,
        .ZIP_RAR => .Rar,
        .ZIP_TAR => .Tar,
        .ZIP_XAR => .Xar,
        .ZIP_SIGNATURE => .Signature,
        .ZIP_EOCDR_NOT_FOUND => .EocdrNotFound,
        .ZIP_EOCDR_OVERFLOW => .EocdrOverflow,
        .ZIP_EOCDR_COMMENT_OVERFLOW => .EocdrCommentOverflow,
        .ZIP_EOCDR_SIGNATURE => .EocdrSignature,
        .ZIP_EOCDR_RECORDS => .EocdrRecords,
        .ZIP_EOCDR_SIZE_OVERFLOW => .EocdrSizeOverflow,
        .ZIP_EOCDR_SIZE_UNDERFLOW => .EocdrSizeUnderflow,
        .ZIP_MULTIPLE_DISKS => .MultipleDisks,
        .ZIP_APPENDED_DATA_ZEROED => .AppendedDataZeroed,
        .ZIP_APPENDED_DATA_BUFFER_BLEED => .AppendedDataBufferBleed,
        .ZIP_PREPENDED_DATA => .PrependedData,
        .ZIP_PREPENDED_DATA_ZEROED => .PrependedDataZeroed,
        .ZIP_PREPENDED_DATA_BUFFER_BLEED => .PrependedDataBufferBleed,
        .ZIP_CDH_OVERFLOW => .CdhOverflow,
        .ZIP_CDH_SIGNATURE => .CdhSignature,
        .ZIP_CDH_RELATIVE_OFFSET_OVERFLOW => .CdhRelativeOffsetOverflow,
        .ZIP_CDH_RELATIVE_OFFSET_OVERLAP => .CdhRelativeOffsetOverlap,
        .ZIP_CDH_FILE_NAME_OVERFLOW => .CdhFileNameOverflow,
        .ZIP_CDH_EXTRA_FIELD_OVERFLOW => .CdhExtraFieldOverflow,
        .ZIP_CDH_FILE_COMMENT_OVERFLOW => .CdhFileCommentOverflow,
        .ZIP_LFH_OVERFLOW => .LfhOverflow,
        .ZIP_LFH_SIGNATURE => .LfhSignature,
        .ZIP_LFH_FILE_NAME_OVERFLOW => .LfhFileNameOverflow,
        .ZIP_LFH_EXTRA_FIELD_OVERFLOW => .LfhExtraFieldOverflow,
        .ZIP_LFH_UNDERFLOW_ZEROED => .LfhUnderflowZeroed,
        .ZIP_LFH_UNDERFLOW_BUFFER_BLEED => .LfhUnderflowBufferBleed,
        .ZIP_LFH_DATA_OVERFLOW => .LfhDataOverflow,
        .ZIP_DDR_OVERFLOW => .DdrOverflow,
        .ZIP_LF_OVERFLOW => .LfOverflow,
        .ZIP_LF_UNDERFLOW_ZEROED => .LfUnderflowZeroed,
        .ZIP_LF_UNDERFLOW_BUFFER_BLEED => .LfUnderflowBufferBleed,
        .ZIP_CD_OVERFLOW => .CdOverflow,
        .ZIP_CD_UNDERFLOW_ZEROED => .CdUnderflowZeroed,
        .ZIP_CD_UNDERFLOW_BUFFER_BLEED => .CdUnderflowBufferBleed,
        .ZIP_CD_EOCDR_OVERFLOW => .CdEocdrOverflow,
        .ZIP_CD_EOCDR_UNDERFLOW_ZEROED => .CdEocdrUnderflowZeroed,
        .ZIP_CD_EOCDR_UNDERFLOW_BUFFER_BLEED => .CdEocdrUnderflowBufferBleed,
        .ZIP_DIFF_LFH_GENERAL_PURPOSE_BIT_FLAG => .DiffLfhGeneralPurposeBitFlag,
        .ZIP_DIFF_LFH_COMPRESSION_METHOD => .DiffLfhCompressionMethod,
        .ZIP_DIFF_LFH_LAST_MOD_FILE_TIME => .DiffLfhLastModFileTime,
        .ZIP_DIFF_LFH_LAST_MOD_FILE_DATE => .DiffLfhLastModFileDate,
        .ZIP_DIFF_LFH_CRC32 => .DiffLfhCrc32,
        .ZIP_DIFF_LFH_COMPRESSED_SIZE => .DiffLfhCompressedSize,
        .ZIP_DIFF_LFH_UNCOMPRESSED_SIZE => .DiffLfhUncompressedSize,
        .ZIP_DIFF_LFH_FILE_NAME_LENGTH => .DiffLfhFileNameLength,
        .ZIP_DIFF_LFH_FILE_NAME => .DiffLfhFileName,
        .ZIP_DIFF_LFH_DDR_CRC32 => .DiffLfhDdrCrc32,
        .ZIP_DIFF_LFH_DDR_COMPRESSED_SIZE => .DiffLfhDdrCompressedSize,
        .ZIP_DIFF_LFH_DDR_UNCOMPRESSED_SIZE => .DiffLfhDdrUncompressedSize,
        .ZIP_DIFF_DDR_CRC32 => .DiffDdrCrc32,
        .ZIP_DIFF_DDR_COMPRESSED_SIZE => .DiffDdrCompressedSize,
        .ZIP_DIFF_DDR_UNCOMPRESSED_SIZE => .DiffDdrUncompressedSize,
        .ZIP_FLAG_OVERFLOW => .FlagOverflow,
        .ZIP_FLAG_TRADITIONAL_ENCRYPTION => .FlagTraditionalEncryption,
        .ZIP_FLAG_ENHANCED_DEFLATE => .FlagEnhancedDeflate,
        .ZIP_FLAG_COMPRESSED_PATCHED_DATA => .FlagCompressedPatchedData,
        .ZIP_FLAG_STRONG_ENCRYPTION => .FlagStrongEncryption,
        .ZIP_FLAG_UNUSED_BIT_7 => .FlagUnusedBit7,
        .ZIP_FLAG_UNUSED_BIT_8 => .FlagUnusedBit8,
        .ZIP_FLAG_UNUSED_BIT_9 => .FlagUnusedBit9,
        .ZIP_FLAG_UNUSED_BIT_10 => .FlagUnusedBit10,
        .ZIP_FLAG_ENHANCED_COMPRESSION => .FlagEnhancedCompression,
        .ZIP_FLAG_MASKED_LOCAL_HEADERS => .FlagMaskedLocalHeaders,
        .ZIP_FLAG_RESERVED_BIT_14 => .FlagReservedBit14,
        .ZIP_FLAG_RESERVED_BIT_15 => .FlagReservedBit15,
        .ZIP_COMPRESSION_METHOD_DANGEROUS => .CompressionMethodDangerous,
        .ZIP_COMPRESSION_METHOD_ENCRYPTED => .CompressionMethodEncrypted,
        .ZIP_COMPRESSION_METHOD_UNSUPPORTED => .CompressionMethodUnsupported,
        .ZIP_STORED_COMPRESSION_SIZE_MISMATCH => .StoredCompressionSizeMismatch,
        .ZIP_DANGEROUS_NEGATIVE_COMPRESSION_RATIO => .DangerousNegativeCompressionRatio,
        .ZIP_TIME_OVERFLOW => .TimeOverflow,
        .ZIP_TIME_HOUR_OVERFLOW => .TimeHourOverflow,
        .ZIP_TIME_MINUTE_OVERFLOW => .TimeMinuteOverflow,
        .ZIP_TIME_SECOND_OVERFLOW => .TimeSecondOverflow,
        .ZIP_DATE_OVERFLOW => .DateOverflow,
        .ZIP_DATE_YEAR_OVERFLOW => .DateYearOverflow,
        .ZIP_DATE_MONTH_OVERFLOW => .DateMonthOverflow,
        .ZIP_DATE_DAY_OVERFLOW => .DateDayOverflow,
        .ZIP_FILE_NAME_LENGTH => .FileNameLength,
        .ZIP_FILE_NAME_CONTROL_CHARACTERS => .FileNameControlCharacters,
        .ZIP_FILE_NAME_TRAVERSAL_DRIVE_PATH => .FileNameTraversalDrivePath,
        .ZIP_FILE_NAME_TRAVERSAL_RELATIVE_PATH => .FileNameTraversalRelativePath,
        .ZIP_FILE_NAME_TRAVERSAL_DOUBLE_DOTS => .FileNameTraversalDoubleDots,
        .ZIP_FILE_NAME_COMPONENT_OVERFLOW => .FileNameComponentOverflow,
        .ZIP_FILE_NAME_BACKSLASH => .FileNameBackslash,
        .ZIP_EXTRA_FIELD_MAX => .ExtraFieldMax,
        .ZIP_EXTRA_FIELD_MIN => .ExtraFieldMin,
        .ZIP_EXTRA_FIELD_ATTRIBUTE_OVERFLOW => .ExtraFieldAttributeOverflow,
        .ZIP_EXTRA_FIELD_OVERFLOW => .ExtraFieldOverflow,
        .ZIP_EXTRA_FIELD_UNDERFLOW_ZEROED => .ExtraFieldUnderflowZeroed,
        .ZIP_EXTRA_FIELD_UNDERFLOW_BUFFER_BLEED => .ExtraFieldUnderflowBufferBleed,
        .ZIP_EXTRA_FIELD_UNICODE_PATH_OVERFLOW => .ExtraFieldUnicodePathOverflow,
        .ZIP_EXTRA_FIELD_UNICODE_PATH_VERSION => .ExtraFieldUnicodePathVersion,
        .ZIP_EXTRA_FIELD_UNICODE_PATH_DIFF => .ExtraFieldUnicodePathDiff,
        .ZIP_UNIX_MODE_OVERFLOW => .UnixModeOverflow,
        .ZIP_UNIX_MODE_BLOCK_DEVICE => .UnixModeBlockDevice,
        .ZIP_UNIX_MODE_CHARACTER_DEVICE => .UnixModeCharacterDevice,
        .ZIP_UNIX_MODE_FIFO => .UnixModeFifo,
        .ZIP_UNIX_MODE_SOCKET => .UnixModeSocket,
        .ZIP_UNIX_MODE_PERMISSIONS_STICKY => .UnixModePermissionsSticky,
        .ZIP_UNIX_MODE_PERMISSIONS_SETGID => .UnixModePermissionsSetgid,
        .ZIP_UNIX_MODE_PERMISSIONS_SETUID => .UnixModePermissionsSetuid,
        .ZIP_DIRECTORY_COMPRESSED => .DirectoryCompressed,
        .ZIP_DIRECTORY_UNCOMPRESSED => .DirectoryUncompressed,
        .ZIP_SYMLINK_COMPRESSED => .SymlinkCompressed,
        .ZIP_SYMLINK_LENGTH => .SymlinkLength,
        .ZIP_SYMLINK_CONTROL_CHARACTERS => .SymlinkControlCharacters,
        .ZIP_SYMLINK_TRAVERSAL_DRIVE_PATH => .SymlinkTraversalDrivePath,
        .ZIP_SYMLINK_TRAVERSAL_RELATIVE_PATH => .SymlinkTraversalRelativePath,
        .ZIP_SYMLINK_TRAVERSAL_DOUBLE_DOTS => .SymlinkTraversalDoubleDots,
        .ZIP_SYMLINK_COMPONENT_OVERFLOW => .SymlinkComponentOverflow,
        .ZIP_STRING_MAX => .StringMax,
        .ZIP_STRING_NULL_BYTE => .StringNullByte,
        .ZIP_INFLATE => .Inflate,
        .ZIP_INFLATE_DICTIONARY => .InflateDictionary,
        .ZIP_INFLATE_STREAM => .InflateStream,
        .ZIP_INFLATE_DATA => .InflateData,
        .ZIP_INFLATE_MEMORY => .InflateMemory,
        .ZIP_INFLATE_COMPRESSED_UNDERFLOW => .InflateCompressedUnderflow,
        .ZIP_INFLATE_UNCOMPRESSED_UNDERFLOW => .InflateUncompressedUnderflow,
        .ZIP_AD_NIHILO => .AdNihilo,
        .ZIP_EX_NIHILO => .ExNihilo,
        .ZIP_CRC32 => .Crc32,
        .ZIP_EOCDL_64_OVERFLOW => .Eocdl64Overflow,
        .ZIP_EOCDL_64_SIGNATURE => .Eocdl64Signature,
        .ZIP_EOCDL_64_NEGATIVE_OFFSET => .Eocdl64NegativeOffset,
        .ZIP_EOCDL_64_DISK => .Eocdl64Disk,
        .ZIP_EOCDL_64_DISKS => .Eocdl64Disks,
        .ZIP_EOCDR_64_OVERFLOW => .Eocdr64Overflow,
        .ZIP_EOCDR_64_SIGNATURE => .Eocdr64Signature,
        .ZIP_EOCDR_EOCDL_64_OVERFLOW => .EocdrEocdl64Overflow,
        .ZIP_EOCDR_EOCDL_64_UNDERFLOW_ZEROED => .EocdrEocdl64UnderflowZeroed,
        .ZIP_EOCDR_EOCDL_64_UNDERFLOW_BUFFER_BLEED => .EocdrEocdl64UnderflowBufferBleed,
        .ZIP_DIFF_EOCDR_DISK => .DiffEocdrDisk,
        .ZIP_DIFF_EOCDR_CD_DISK => .DiffEocdrCdDisk,
        .ZIP_DIFF_EOCDR_CD_DISK_RECORDS => .DiffEocdrCdDiskRecords,
        .ZIP_DIFF_EOCDR_CD_RECORDS => .DiffEocdrCdRecords,
        .ZIP_DIFF_EOCDR_CD_SIZE => .DiffEocdrCdSize,
        .ZIP_DIFF_EOCDR_CD_OFFSET => .DiffEocdrCdOffset,
        .ZIP_EIEF_64_COMPRESSED_SIZE => .Eief64CompressedSize,
        .ZIP_EIEF_64_DISK => .Eief64Disk,
        .ZIP_EIEF_64_RELATIVE_OFFSET => .Eief64RelativeOffset,
        .ZIP_EIEF_64_UNCOMPRESSED_SIZE => .Eief64UncompressedSize,
        .ZIP_EIEF_64_UNDERFLOW_ZEROED => .Eief64UnderflowZeroed,
        .ZIP_EIEF_64_UNDERFLOW_BUFFER_BLEED => .Eief64UnderflowBufferBleed,
        .ZIP_EIEF_64_LFH => .Eief64Lfh,
        .ZIP_DIRECTORY_HAS_NO_LFH => .DirectoryHasNoLfh,
    };
    if (subtype) |s| {
        diags.subtype = s;
        return error.ZipError;
    }
}

pub extern fn pure_zip(buffer: [*c]const u8, size: u64, flags: u64) E;

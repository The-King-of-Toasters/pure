const std = @import("std");
const pure = @import("pure.zig");

pub const E = enum(c_int) {
    OK,
    SIZE_MAX,
    MALLOC,
    STRING_NOT_FOUND,
    UINT64_OVERFLOW,
    ZIP_BOMB_ARCHIVES,
    ZIP_BOMB_DEPTH,
    ZIP_BOMB_FIFIELD,
    ZIP_BOMB_FILES,
    ZIP_BOMB_RATIO,
    ZIP_BOMB_INFLATE_COMPRESSED_OVERFLOW,
    ZIP_BOMB_INFLATE_UNCOMPRESSED_OVERFLOW,
    ZIP_TOO_SMALL,
    ZIP_SIZE_4GB,
    ZIP_RAR,
    ZIP_TAR,
    ZIP_XAR,
    ZIP_SIGNATURE,
    ZIP_EOCDR_NOT_FOUND,
    ZIP_EOCDR_OVERFLOW,
    ZIP_EOCDR_COMMENT_OVERFLOW,
    ZIP_EOCDR_SIGNATURE,
    ZIP_EOCDR_RECORDS,
    ZIP_EOCDR_SIZE_OVERFLOW,
    ZIP_EOCDR_SIZE_UNDERFLOW,
    ZIP_MULTIPLE_DISKS,
    ZIP_APPENDED_DATA_ZEROED,
    ZIP_APPENDED_DATA_BUFFER_BLEED,
    ZIP_PREPENDED_DATA,
    ZIP_PREPENDED_DATA_ZEROED,
    ZIP_PREPENDED_DATA_BUFFER_BLEED,
    ZIP_CDH_OVERFLOW,
    ZIP_CDH_SIGNATURE,
    ZIP_CDH_RELATIVE_OFFSET_OVERFLOW,
    ZIP_CDH_RELATIVE_OFFSET_OVERLAP,
    ZIP_CDH_FILE_NAME_OVERFLOW,
    ZIP_CDH_EXTRA_FIELD_OVERFLOW,
    ZIP_CDH_FILE_COMMENT_OVERFLOW,
    ZIP_LFH_OVERFLOW,
    ZIP_LFH_SIGNATURE,
    ZIP_LFH_FILE_NAME_OVERFLOW,
    ZIP_LFH_EXTRA_FIELD_OVERFLOW,
    ZIP_LFH_UNDERFLOW_ZEROED,
    ZIP_LFH_UNDERFLOW_BUFFER_BLEED,
    ZIP_LFH_DATA_OVERFLOW,
    ZIP_DDR_OVERFLOW,
    ZIP_LF_OVERFLOW,
    ZIP_LF_UNDERFLOW_ZEROED,
    ZIP_LF_UNDERFLOW_BUFFER_BLEED,
    ZIP_CD_OVERFLOW,
    ZIP_CD_UNDERFLOW_ZEROED,
    ZIP_CD_UNDERFLOW_BUFFER_BLEED,
    ZIP_CD_EOCDR_OVERFLOW,
    ZIP_CD_EOCDR_UNDERFLOW_ZEROED,
    ZIP_CD_EOCDR_UNDERFLOW_BUFFER_BLEED,
    ZIP_DIFF_LFH_GENERAL_PURPOSE_BIT_FLAG,
    ZIP_DIFF_LFH_COMPRESSION_METHOD,
    ZIP_DIFF_LFH_LAST_MOD_FILE_TIME,
    ZIP_DIFF_LFH_LAST_MOD_FILE_DATE,
    ZIP_DIFF_LFH_CRC32,
    ZIP_DIFF_LFH_COMPRESSED_SIZE,
    ZIP_DIFF_LFH_UNCOMPRESSED_SIZE,
    ZIP_DIFF_LFH_FILE_NAME_LENGTH,
    ZIP_DIFF_LFH_FILE_NAME,
    ZIP_DIFF_LFH_DDR_CRC32,
    ZIP_DIFF_LFH_DDR_COMPRESSED_SIZE,
    ZIP_DIFF_LFH_DDR_UNCOMPRESSED_SIZE,
    ZIP_DIFF_DDR_CRC32,
    ZIP_DIFF_DDR_COMPRESSED_SIZE,
    ZIP_DIFF_DDR_UNCOMPRESSED_SIZE,
    ZIP_FLAG_OVERFLOW,
    ZIP_FLAG_TRADITIONAL_ENCRYPTION,
    ZIP_FLAG_ENHANCED_DEFLATE,
    ZIP_FLAG_COMPRESSED_PATCHED_DATA,
    ZIP_FLAG_STRONG_ENCRYPTION,
    ZIP_FLAG_UNUSED_BIT_7,
    ZIP_FLAG_UNUSED_BIT_8,
    ZIP_FLAG_UNUSED_BIT_9,
    ZIP_FLAG_UNUSED_BIT_10,
    ZIP_FLAG_ENHANCED_COMPRESSION,
    ZIP_FLAG_MASKED_LOCAL_HEADERS,
    ZIP_FLAG_RESERVED_BIT_14,
    ZIP_FLAG_RESERVED_BIT_15,
    ZIP_COMPRESSION_METHOD_DANGEROUS,
    ZIP_COMPRESSION_METHOD_ENCRYPTED,
    ZIP_COMPRESSION_METHOD_UNSUPPORTED,
    ZIP_STORED_COMPRESSION_SIZE_MISMATCH,
    ZIP_DANGEROUS_NEGATIVE_COMPRESSION_RATIO,
    ZIP_TIME_OVERFLOW,
    ZIP_TIME_HOUR_OVERFLOW,
    ZIP_TIME_MINUTE_OVERFLOW,
    ZIP_TIME_SECOND_OVERFLOW,
    ZIP_DATE_OVERFLOW,
    ZIP_DATE_YEAR_OVERFLOW,
    ZIP_DATE_MONTH_OVERFLOW,
    ZIP_DATE_DAY_OVERFLOW,
    ZIP_FILE_NAME_LENGTH,
    ZIP_FILE_NAME_CONTROL_CHARACTERS,
    ZIP_FILE_NAME_TRAVERSAL_DRIVE_PATH,
    ZIP_FILE_NAME_TRAVERSAL_RELATIVE_PATH,
    ZIP_FILE_NAME_TRAVERSAL_DOUBLE_DOTS,
    ZIP_FILE_NAME_COMPONENT_OVERFLOW,
    ZIP_FILE_NAME_BACKSLASH,
    ZIP_EXTRA_FIELD_MAX,
    ZIP_EXTRA_FIELD_MIN,
    ZIP_EXTRA_FIELD_ATTRIBUTE_OVERFLOW,
    ZIP_EXTRA_FIELD_OVERFLOW,
    ZIP_EXTRA_FIELD_UNDERFLOW_ZEROED,
    ZIP_EXTRA_FIELD_UNDERFLOW_BUFFER_BLEED,
    ZIP_EXTRA_FIELD_UNICODE_PATH_OVERFLOW,
    ZIP_EXTRA_FIELD_UNICODE_PATH_VERSION,
    ZIP_EXTRA_FIELD_UNICODE_PATH_DIFF,
    ZIP_UNIX_MODE_OVERFLOW,
    ZIP_UNIX_MODE_BLOCK_DEVICE,
    ZIP_UNIX_MODE_CHARACTER_DEVICE,
    ZIP_UNIX_MODE_FIFO,
    ZIP_UNIX_MODE_SOCKET,
    ZIP_UNIX_MODE_PERMISSIONS_STICKY,
    ZIP_UNIX_MODE_PERMISSIONS_SETGID,
    ZIP_UNIX_MODE_PERMISSIONS_SETUID,
    ZIP_DIRECTORY_COMPRESSED,
    ZIP_DIRECTORY_UNCOMPRESSED,
    ZIP_SYMLINK_COMPRESSED,
    ZIP_SYMLINK_LENGTH,
    ZIP_SYMLINK_CONTROL_CHARACTERS,
    ZIP_SYMLINK_TRAVERSAL_DRIVE_PATH,
    ZIP_SYMLINK_TRAVERSAL_RELATIVE_PATH,
    ZIP_SYMLINK_TRAVERSAL_DOUBLE_DOTS,
    ZIP_SYMLINK_COMPONENT_OVERFLOW,
    ZIP_STRING_MAX,
    ZIP_STRING_NULL_BYTE,
    ZIP_INFLATE,
    ZIP_INFLATE_DICTIONARY,
    ZIP_INFLATE_STREAM,
    ZIP_INFLATE_DATA,
    ZIP_INFLATE_MEMORY,
    ZIP_INFLATE_COMPRESSED_UNDERFLOW,
    ZIP_INFLATE_UNCOMPRESSED_UNDERFLOW,
    ZIP_AD_NIHILO,
    ZIP_EX_NIHILO,
    ZIP_CRC32,
    ZIP_EOCDL_64_OVERFLOW,
    ZIP_EOCDL_64_SIGNATURE,
    ZIP_EOCDL_64_NEGATIVE_OFFSET,
    ZIP_EOCDL_64_DISK,
    ZIP_EOCDL_64_DISKS,
    ZIP_EOCDR_64_OVERFLOW,
    ZIP_EOCDR_64_SIGNATURE,
    ZIP_EOCDR_EOCDL_64_OVERFLOW,
    ZIP_EOCDR_EOCDL_64_UNDERFLOW_ZEROED,
    ZIP_EOCDR_EOCDL_64_UNDERFLOW_BUFFER_BLEED,
    ZIP_DIFF_EOCDR_DISK,
    ZIP_DIFF_EOCDR_CD_DISK,
    ZIP_DIFF_EOCDR_CD_DISK_RECORDS,
    ZIP_DIFF_EOCDR_CD_RECORDS,
    ZIP_DIFF_EOCDR_CD_SIZE,
    ZIP_DIFF_EOCDR_CD_OFFSET,
    ZIP_EIEF_64_COMPRESSED_SIZE,
    ZIP_EIEF_64_DISK,
    ZIP_EIEF_64_RELATIVE_OFFSET,
    ZIP_EIEF_64_UNCOMPRESSED_SIZE,
    ZIP_EIEF_64_UNDERFLOW_ZEROED,
    ZIP_EIEF_64_UNDERFLOW_BUFFER_BLEED,
    ZIP_EIEF_64_LFH,
    ZIP_DIRECTORY_HAS_NO_LFH,
};

const convertedErrors = pure.errors || error{ok};

fn convertError(e: E) convertedErrors {
    return switch (e) {
        // Eliminated
        .STRING_NOT_FOUND => error.ok,
        .UINT64_OVERFLOW => error.Overflow,

        .OK => error.ok,
        .SIZE_MAX => error.SizeMax,
        .MALLOC => error.OutOfMemory,
        .ZIP_BOMB_ARCHIVES => error.BombArchives,
        .ZIP_BOMB_DEPTH => error.BombDepth,
        .ZIP_BOMB_FIFIELD => error.BombFifield,
        .ZIP_BOMB_FILES => error.BombFiles,
        .ZIP_BOMB_RATIO => error.BombRatio,
        .ZIP_BOMB_INFLATE_COMPRESSED_OVERFLOW => error.BombInflateCompressedOverflow,
        .ZIP_BOMB_INFLATE_UNCOMPRESSED_OVERFLOW => error.BombInflateUncompressedOverflow,
        .ZIP_TOO_SMALL => error.TooSmall,
        .ZIP_SIZE_4GB => error.Size4Gb,
        .ZIP_RAR => error.Rar,
        .ZIP_TAR => error.Tar,
        .ZIP_XAR => error.Xar,
        .ZIP_SIGNATURE => error.Signature,
        .ZIP_EOCDR_NOT_FOUND => error.EocdrNotFound,
        .ZIP_EOCDR_OVERFLOW => error.EocdrOverflow,
        .ZIP_EOCDR_COMMENT_OVERFLOW => error.EocdrCommentOverflow,
        .ZIP_EOCDR_SIGNATURE => error.EocdrSignature,
        .ZIP_EOCDR_RECORDS => error.EocdrRecords,
        .ZIP_EOCDR_SIZE_OVERFLOW => error.EocdrSizeOverflow,
        .ZIP_EOCDR_SIZE_UNDERFLOW => error.EocdrSizeUnderflow,
        .ZIP_MULTIPLE_DISKS => error.MultipleDisks,
        .ZIP_APPENDED_DATA_ZEROED => error.AppendedDataZeroed,
        .ZIP_APPENDED_DATA_BUFFER_BLEED => error.AppendedDataBufferBleed,
        .ZIP_PREPENDED_DATA => error.PrependedData,
        .ZIP_PREPENDED_DATA_ZEROED => error.PrependedDataZeroed,
        .ZIP_PREPENDED_DATA_BUFFER_BLEED => error.PrependedDataBufferBleed,
        .ZIP_CDH_OVERFLOW => error.CdhOverflow,
        .ZIP_CDH_SIGNATURE => error.CdhSignature,
        .ZIP_CDH_RELATIVE_OFFSET_OVERFLOW => error.CdhRelativeOffsetOverflow,
        .ZIP_CDH_RELATIVE_OFFSET_OVERLAP => error.CdhRelativeOffsetOverlap,
        .ZIP_CDH_FILE_NAME_OVERFLOW => error.CdhFileNameOverflow,
        .ZIP_CDH_EXTRA_FIELD_OVERFLOW => error.CdhExtraFieldOverflow,
        .ZIP_CDH_FILE_COMMENT_OVERFLOW => error.CdhFileCommentOverflow,
        .ZIP_LFH_OVERFLOW => error.LfhOverflow,
        .ZIP_LFH_SIGNATURE => error.LfhSignature,
        .ZIP_LFH_FILE_NAME_OVERFLOW => error.LfhFileNameOverflow,
        .ZIP_LFH_EXTRA_FIELD_OVERFLOW => error.LfhExtraFieldOverflow,
        .ZIP_LFH_UNDERFLOW_ZEROED => error.LfhUnderflowZeroed,
        .ZIP_LFH_UNDERFLOW_BUFFER_BLEED => error.LfhUnderflowBufferBleed,
        .ZIP_LFH_DATA_OVERFLOW => error.LfhDataOverflow,
        .ZIP_DDR_OVERFLOW => error.DdrOverflow,
        .ZIP_LF_OVERFLOW => error.LfOverflow,
        .ZIP_LF_UNDERFLOW_ZEROED => error.LfUnderflowZeroed,
        .ZIP_LF_UNDERFLOW_BUFFER_BLEED => error.LfUnderflowBufferBleed,
        .ZIP_CD_OVERFLOW => error.CdOverflow,
        .ZIP_CD_UNDERFLOW_ZEROED => error.CdUnderflowZeroed,
        .ZIP_CD_UNDERFLOW_BUFFER_BLEED => error.CdUnderflowBufferBleed,
        .ZIP_CD_EOCDR_OVERFLOW => error.CdEocdrOverflow,
        .ZIP_CD_EOCDR_UNDERFLOW_ZEROED => error.CdEocdrUnderflowZeroed,
        .ZIP_CD_EOCDR_UNDERFLOW_BUFFER_BLEED => error.CdEocdrUnderflowBufferBleed,
        .ZIP_DIFF_LFH_GENERAL_PURPOSE_BIT_FLAG => error.DiffLfhGeneralPurposeBitFlag,
        .ZIP_DIFF_LFH_COMPRESSION_METHOD => error.DiffLfhCompressionMethod,
        .ZIP_DIFF_LFH_LAST_MOD_FILE_TIME => error.DiffLfhLastModFileTime,
        .ZIP_DIFF_LFH_LAST_MOD_FILE_DATE => error.DiffLfhLastModFileDate,
        .ZIP_DIFF_LFH_CRC32 => error.DiffLfhCrc32,
        .ZIP_DIFF_LFH_COMPRESSED_SIZE => error.DiffLfhCompressedSize,
        .ZIP_DIFF_LFH_UNCOMPRESSED_SIZE => error.DiffLfhUncompressedSize,
        .ZIP_DIFF_LFH_FILE_NAME_LENGTH => error.DiffLfhFileNameLength,
        .ZIP_DIFF_LFH_FILE_NAME => error.DiffLfhFileName,
        .ZIP_DIFF_LFH_DDR_CRC32 => error.DiffLfhDdrCrc32,
        .ZIP_DIFF_LFH_DDR_COMPRESSED_SIZE => error.DiffLfhDdrCompressedSize,
        .ZIP_DIFF_LFH_DDR_UNCOMPRESSED_SIZE => error.DiffLfhDdrUncompressedSize,
        .ZIP_DIFF_DDR_CRC32 => error.DiffDdrCrc32,
        .ZIP_DIFF_DDR_COMPRESSED_SIZE => error.DiffDdrCompressedSize,
        .ZIP_DIFF_DDR_UNCOMPRESSED_SIZE => error.DiffDdrUncompressedSize,
        .ZIP_FLAG_OVERFLOW => error.FlagOverflow,
        .ZIP_FLAG_TRADITIONAL_ENCRYPTION => error.FlagTraditionalEncryption,
        .ZIP_FLAG_ENHANCED_DEFLATE => error.FlagEnhancedDeflate,
        .ZIP_FLAG_COMPRESSED_PATCHED_DATA => error.FlagCompressedPatchedData,
        .ZIP_FLAG_STRONG_ENCRYPTION => error.FlagStrongEncryption,
        .ZIP_FLAG_UNUSED_BIT_7 => error.FlagUnusedBit7,
        .ZIP_FLAG_UNUSED_BIT_8 => error.FlagUnusedBit8,
        .ZIP_FLAG_UNUSED_BIT_9 => error.FlagUnusedBit9,
        .ZIP_FLAG_UNUSED_BIT_10 => error.FlagUnusedBit10,
        .ZIP_FLAG_ENHANCED_COMPRESSION => error.FlagEnhancedCompression,
        .ZIP_FLAG_MASKED_LOCAL_HEADERS => error.FlagMaskedLocalHeaders,
        .ZIP_FLAG_RESERVED_BIT_14 => error.FlagReservedBit14,
        .ZIP_FLAG_RESERVED_BIT_15 => error.FlagReservedBit15,
        .ZIP_COMPRESSION_METHOD_DANGEROUS => error.CompressionMethodDangerous,
        .ZIP_COMPRESSION_METHOD_ENCRYPTED => error.CompressionMethodEncrypted,
        .ZIP_COMPRESSION_METHOD_UNSUPPORTED => error.CompressionMethodUnsupported,
        .ZIP_STORED_COMPRESSION_SIZE_MISMATCH => error.StoredCompressionSizeMismatch,
        .ZIP_DANGEROUS_NEGATIVE_COMPRESSION_RATIO => error.DangerousNegativeCompressionRatio,
        .ZIP_TIME_OVERFLOW => error.TimeOverflow,
        .ZIP_TIME_HOUR_OVERFLOW => error.TimeHourOverflow,
        .ZIP_TIME_MINUTE_OVERFLOW => error.TimeMinuteOverflow,
        .ZIP_TIME_SECOND_OVERFLOW => error.TimeSecondOverflow,
        .ZIP_DATE_OVERFLOW => error.DateOverflow,
        .ZIP_DATE_YEAR_OVERFLOW => error.DateYearOverflow,
        .ZIP_DATE_MONTH_OVERFLOW => error.DateMonthOverflow,
        .ZIP_DATE_DAY_OVERFLOW => error.DateDayOverflow,
        .ZIP_FILE_NAME_LENGTH => error.FileNameLength,
        .ZIP_FILE_NAME_CONTROL_CHARACTERS => error.FileNameControlCharacters,
        .ZIP_FILE_NAME_TRAVERSAL_DRIVE_PATH => error.FileNameTraversalDrivePath,
        .ZIP_FILE_NAME_TRAVERSAL_RELATIVE_PATH => error.FileNameTraversalRelativePath,
        .ZIP_FILE_NAME_TRAVERSAL_DOUBLE_DOTS => error.FileNameTraversalDoubleDots,
        .ZIP_FILE_NAME_COMPONENT_OVERFLOW => error.FileNameComponentOverflow,
        .ZIP_FILE_NAME_BACKSLASH => error.FileNameBackslash,
        .ZIP_EXTRA_FIELD_MAX => error.ExtraFieldMax,
        .ZIP_EXTRA_FIELD_MIN => error.ExtraFieldMin,
        .ZIP_EXTRA_FIELD_ATTRIBUTE_OVERFLOW => error.ExtraFieldAttributeOverflow,
        .ZIP_EXTRA_FIELD_OVERFLOW => error.ExtraFieldOverflow,
        .ZIP_EXTRA_FIELD_UNDERFLOW_ZEROED => error.ExtraFieldUnderflowZeroed,
        .ZIP_EXTRA_FIELD_UNDERFLOW_BUFFER_BLEED => error.ExtraFieldUnderflowBufferBleed,
        .ZIP_EXTRA_FIELD_UNICODE_PATH_OVERFLOW => error.ExtraFieldUnicodePathOverflow,
        .ZIP_EXTRA_FIELD_UNICODE_PATH_VERSION => error.ExtraFieldUnicodePathVersion,
        .ZIP_EXTRA_FIELD_UNICODE_PATH_DIFF => error.ExtraFieldUnicodePathDiff,
        .ZIP_UNIX_MODE_OVERFLOW => error.UnixModeOverflow,
        .ZIP_UNIX_MODE_BLOCK_DEVICE => error.UnixModeBlockDevice,
        .ZIP_UNIX_MODE_CHARACTER_DEVICE => error.UnixModeCharacterDevice,
        .ZIP_UNIX_MODE_FIFO => error.UnixModeFifo,
        .ZIP_UNIX_MODE_SOCKET => error.UnixModeSocket,
        .ZIP_UNIX_MODE_PERMISSIONS_STICKY => error.UnixModePermissionsSticky,
        .ZIP_UNIX_MODE_PERMISSIONS_SETGID => error.UnixModePermissionsSetgid,
        .ZIP_UNIX_MODE_PERMISSIONS_SETUID => error.UnixModePermissionsSetuid,
        .ZIP_DIRECTORY_COMPRESSED => error.DirectoryCompressed,
        .ZIP_DIRECTORY_UNCOMPRESSED => error.DirectoryUncompressed,
        .ZIP_SYMLINK_COMPRESSED => error.SymlinkCompressed,
        .ZIP_SYMLINK_LENGTH => error.SymlinkLength,
        .ZIP_SYMLINK_CONTROL_CHARACTERS => error.SymlinkControlCharacters,
        .ZIP_SYMLINK_TRAVERSAL_DRIVE_PATH => error.SymlinkTraversalDrivePath,
        .ZIP_SYMLINK_TRAVERSAL_RELATIVE_PATH => error.SymlinkTraversalRelativePath,
        .ZIP_SYMLINK_TRAVERSAL_DOUBLE_DOTS => error.SymlinkTraversalDoubleDots,
        .ZIP_SYMLINK_COMPONENT_OVERFLOW => error.SymlinkComponentOverflow,
        .ZIP_STRING_MAX => error.StringMax,
        .ZIP_STRING_NULL_BYTE => error.StringNullByte,
        .ZIP_INFLATE => error.Inflate,
        .ZIP_INFLATE_DICTIONARY => error.InflateDictionary,
        .ZIP_INFLATE_STREAM => error.InflateStream,
        .ZIP_INFLATE_DATA => error.InflateData,
        .ZIP_INFLATE_MEMORY => error.InflateMemory,
        .ZIP_INFLATE_COMPRESSED_UNDERFLOW => error.InflateCompressedUnderflow,
        .ZIP_INFLATE_UNCOMPRESSED_UNDERFLOW => error.InflateUncompressedUnderflow,
        .ZIP_AD_NIHILO => error.AdNihilo,
        .ZIP_EX_NIHILO => error.ExNihilo,
        .ZIP_CRC32 => error.Crc32,
        .ZIP_EOCDL_64_OVERFLOW => error.Eocdl64Overflow,
        .ZIP_EOCDL_64_SIGNATURE => error.Eocdl64Signature,
        .ZIP_EOCDL_64_NEGATIVE_OFFSET => error.Eocdl64NegativeOffset,
        .ZIP_EOCDL_64_DISK => error.Eocdl64Disk,
        .ZIP_EOCDL_64_DISKS => error.Eocdl64Disks,
        .ZIP_EOCDR_64_OVERFLOW => error.Eocdr64Overflow,
        .ZIP_EOCDR_64_SIGNATURE => error.Eocdr64Signature,
        .ZIP_EOCDR_EOCDL_64_OVERFLOW => error.EocdrEocdl64Overflow,
        .ZIP_EOCDR_EOCDL_64_UNDERFLOW_ZEROED => error.EocdrEocdl64UnderflowZeroed,
        .ZIP_EOCDR_EOCDL_64_UNDERFLOW_BUFFER_BLEED => error.EocdrEocdl64UnderflowBufferBleed,
        .ZIP_DIFF_EOCDR_DISK => error.DiffEocdrDisk,
        .ZIP_DIFF_EOCDR_CD_DISK => error.DiffEocdrCdDisk,
        .ZIP_DIFF_EOCDR_CD_DISK_RECORDS => error.DiffEocdrCdDiskRecords,
        .ZIP_DIFF_EOCDR_CD_RECORDS => error.DiffEocdrCdRecords,
        .ZIP_DIFF_EOCDR_CD_SIZE => error.DiffEocdrCdSize,
        .ZIP_DIFF_EOCDR_CD_OFFSET => error.DiffEocdrCdOffset,
        .ZIP_EIEF_64_COMPRESSED_SIZE => error.Eief64CompressedSize,
        .ZIP_EIEF_64_DISK => error.Eief64Disk,
        .ZIP_EIEF_64_RELATIVE_OFFSET => error.Eief64RelativeOffset,
        .ZIP_EIEF_64_UNCOMPRESSED_SIZE => error.Eief64UncompressedSize,
        .ZIP_EIEF_64_UNDERFLOW_ZEROED => error.Eief64UnderflowZeroed,
        .ZIP_EIEF_64_UNDERFLOW_BUFFER_BLEED => error.Eief64UnderflowBufferBleed,
        .ZIP_EIEF_64_LFH => error.Eief64Lfh,
        .ZIP_DIRECTORY_HAS_NO_LFH => error.DirectoryHasNoLfh,
    };
}

pub extern fn pure_zip(buffer: [*c]const u8, size: u64, flags: u64) E;

pub fn main() !void {
    var buf_out = std.io.bufferedWriter(std.io.getStdOut().writer());
    const writer = buf_out.writer();
    var gpa = std.heap.GeneralPurposeAllocator(.{
        // .retain_metadata = true,
        // .verbose_log = true,
    }){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    var arg_iterator = try std.process.argsWithAllocator(allocator);
    defer arg_iterator.deinit();
    std.debug.assert(arg_iterator.skip()); // program name
    var next_arg: ?[]const u8 = arg_iterator.next() orelse return error.NoArgs;
    var check_error = false;
    if (std.mem.eql(u8, next_arg.?, "-c")) {
        check_error = true;
        next_arg = arg_iterator.next() orelse return error.NoArgs;
    }

    while (next_arg) |arg| : (next_arg = arg_iterator.next()) {
        var file = try std.fs.cwd().openFile(arg, .{});
        defer file.close();
        const zip = try file.readToEndAlloc(allocator, std.math.maxInt(u32));
        defer allocator.free(zip);

        var ret_zig: convertedErrors = error.ok;
        pure.zip(zip, allocator) catch |err| {
            ret_zig = err;
        };

        if (check_error) {
            const ret_c = pure_zip(zip.ptr, zip.len, 0);
            if (ret_zig != convertError(ret_c))
                try writer.print("{s}: {} instead of {}\n", .{ arg, ret_zig, ret_c });
        } else {
            try writer.print("{s} - {}\n", .{ arg, ret_zig });
        }
    }

    try buf_out.flush();
}
